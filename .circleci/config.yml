version: 2.1

orbs:
  node: circleci/node@3.0.0
  slack: circleci/slack@3.4.2
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here     
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend && npm i
      - run:
          name: Build front-end
          command: |
            cd frontend && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     color: "#42e2f4"
      #     mentions: "Mina,"
      #     message: A custom message to notify the channel about the latest build
      # - slack/status:
      #     fail_only: true
      #     mentions: "Mina"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend && npm i
      - run:
          name: Back-end build
          command: |
            cd backend && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys:
            - frontend-build
      - run: cd frontend && npm run test # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys:
            - backend-build
      - run: cd backend && npm run test  #Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  # Checkout code from git
      - restore_cache: # Restore from cache
          keys:
            - frontend-build
      - run : cd frontend && npm i
      - run:  cd frontend && npm audit fix --audit-level=critical --force # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys:
            - backend-build
      - run: cd backend && npm audit fix --audit-level=critical --force

# Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependancies 
          command: |
            yum install gzip -y 
            yum install tar -y       
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --region eu-central-1 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text) 
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 71d21d62-9a32-44e1-8840-019cd3da1255" --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}                   
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
          # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
        fingerprints: ["57:b5:3c:2c:80:24:a1:1a:80:3e:28:e6:8c:81:01:39"] # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: ssh configure
          command: |
           echo "[defaults]" > ~/.ansible.cfg
      - run:
          name: ssh configure 2
          command: |
           echo "host_key_checking = False" >>  ~/.ansible.cfg
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migration > migration.log.txt
      - run:
          name: Send migration results to memstash
          command: |
            if  grep "has been executed successfully" backend/migration.log.txt
            then
            curl -H "Content-Type: text/plain" -H "token: 71d21d62-9a32-44e1-8840-019cd3da1255" --request PUT --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7} 
            fi
     # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-backend,scan-frontend,test-frontend,test-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]